{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","robo","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","index","src_components_Card","key","id","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VAgBeA,eAZF,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,KAC1B,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCAAuCC,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACnEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUN,GACxBG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBL,OCYzBS,EAnBF,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OACf,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UAEfK,EAAOC,IAAI,SAACC,EAAMC,GACd,OACEX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAOF,EACbZ,KAAQS,EAAOG,GAAOG,GACtBjB,KAAQW,EAAOG,GAAOd,KACtBC,MAASU,EAAOG,GAAOb,YCDtBiB,EATA,SAACC,GAEhB,OACIhB,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAC/DJ,EAAMK,WCSAC,EAbI,SAAA1B,GAAoB,IAAlB2B,EAAkB3B,EAAlB2B,aACjB,OAAQvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACnBH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVqB,KAAK,SACLC,YAAY,qBACZC,SAAUH,MCcHI,qBAnBX,SAAAA,EAAYX,GAAM,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KACDmB,MAAQ,CACTC,UAAU,GAHAR,iFAOAS,EAAMC,GACpBP,KAAKQ,SAAS,CAACH,UAAS,qCAIxB,OAAIL,KAAKI,MAAMC,SACJpC,EAAAC,EAAAC,cAAA,kCAEJ6B,KAAKf,MAAMK,gBAhBEmB,cCwBtBC,qMAGCV,KAAKf,MAAM0B,mDAGN,IAAAC,EACmDZ,KAAKf,MAAxD4B,EADAD,EACAC,YAAaC,EADbF,EACaE,eAAgBrC,EAD7BmC,EAC6BnC,OAAQsC,EADrCH,EACqCG,UACvCC,EAAiBvC,EAAOwC,OAAO,SAAAC,GACjC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASP,EAAYM,iBAGzD,OAAOJ,EACP9C,EAAAC,EAAAC,cAAA,+BAEIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACkD,EAAD,CAAW7B,aAAcsB,IACzB7C,EAAAC,EAAAC,cAACmD,EAAD,KACArD,EAAAC,EAAAC,cAACoD,EAAD,KACAtD,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,OAAQuC,cApBZP,cA6BHgB,cA7CS,SAAArB,GACtB,MAAO,CACLS,YAAaT,EAAMsB,aAAab,YAChCpC,OAAQ2B,EAAMuB,cAAclD,OAC5BsC,UAAWX,EAAMuB,cAAcZ,UAC/BT,MAAOF,EAAMuB,cAAcrB,QAIJ,SAACsB,GACzB,MAAO,CACHd,eAAgB,SAACe,GAAD,OAAWD,ECfO,CACvCnC,KCPgC,sBDQhCqC,QDawDD,EAAME,OAAOC,SAChErB,gBAAiB,kBAAMiB,ECXK,SAACA,GAClCA,EAAS,CAACnC,KCV0B,2BDWpCwC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAKA,EAASC,SAC3BF,KAAK,SAAAG,GAAI,OAAIT,EAAS,CAAEnC,KCZS,yBDYqBqC,QAASO,MAC/DC,MAAM,SAAAhC,GAAK,OAAIsB,EAAS,CAACnC,KCZO,wBDYsBa,iBDuC5CmB,CAA6Cf,GG3CxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAqB,CACzB/B,YAAa,IAYTgC,EAAqB,CACvB9B,WAAW,EACXtC,OAAQ,GACR6B,MAAO,ICXLwC,EAASC,yBACTC,EAAcC,YAAgB,CAACvB,aDFT,WAA2C,IAA1CtB,EAA0C8C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCN,EAAoBS,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC5D,OAAOG,EAAO5D,MACV,IFZ0B,sBEatB,OAAOK,OAAOwD,OAAO,GAAIlD,EAAO,CAACS,YAAawC,EAAOvB,UACzD,QACI,OAAO1B,ICH+BuB,cDarB,WAA2C,IAA1CvB,EAA0C8C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCL,EAAoBQ,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC7D,OAAOG,EAAO5D,MACV,IFzB8B,yBE0B1B,OAAOK,OAAOwD,OAAO,GAAIlD,EAAO,CAAEW,WAAW,IACjD,IF1B8B,yBE2B1B,OAAOjB,OAAOwD,OAAO,GAAIlD,EAAO,CAAC3B,OAAQ4E,EAAOvB,QAASf,WAAU,IACvE,IF3B6B,wBE4BzB,OAAOjB,OAAOwD,OAAO,GAAIlD,EAAO,CAACE,MAAQ+C,EAAOvB,QAASf,WAAU,IACvE,QACI,OAAOX,MCrBbmD,EAAQC,YAAYR,EAAaS,YAAgBC,IAAiBZ,IAExEa,IAASC,OAAQ3F,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAUN,MAAOA,GACdtF,EAAAC,EAAAC,cAAC2F,EAAD,OAEJC,SAASC,eAAe,SF+GlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.247e2070.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\nimport 'tachyons'\r\n\r\nconst Card = ({name, email, robo}) => {\r\n  return (\r\n     <div className=\"bg-green dib br3 pa3 ma2 grow shadow-5\">\r\n       <div className =\"tc\">\r\n       <img className=\"br-100 h4 w4 dib ba b--black-05 pa2\"  alt='robots' src={`https://robohash.org/${robo}?size=200x200`} />\r\n          <h2 className=\"f3 mb2\">{name}</h2>\r\n          <h3 className='f5 fw4 white mt0'>{email}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return ( \r\n      <div className = \"cf pa2\"> \r\n      {\r\n        robots.map((user, index) => {\r\n            return ( \r\n              <Card key = {index}\r\n              robo = {robots[index].id}\r\n              name = {robots[index].name}\r\n              email = {robots[index].email}\r\n              />\r\n            )\r\n          })\r\n      }\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    export default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\nreturn (\r\n    <div style={{overflowY: 'scroll', border: '2px solid black', height:'800px' }}>\r\n        {props.children}\r\n    </div>\r\n)\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox  = ({searchChange}) => {\r\n    return (<div className='pa3'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots here'\r\n        onChange={searchChange}\r\n        />\r\n        \r\n</div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error,info) {\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>Error for this page.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList';  \r\nimport Scroll from '../components/Scroll.js';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {setSearchField, requestRobots} from '../actions';\r\nimport { request } from 'http';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return { \r\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)) ,\r\n       onRequestRobots: () => dispatch(requestRobots())\r\n   }\r\n}\r\n\r\nclass App extends Component {\r\n     \r\n    componentDidMount() {\r\n       this.props.onRequestRobots()\r\n    }\r\n\r\n    render(){\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return isPending ?  \r\n    <h1>Loading Robots...</h1> :\r\n    (\r\n        <div className='tc'>\r\n            <h1 className='f1'>Robo Friends</h1>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response =>  response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, error}))\r\n}","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error : action.payload, isPending:false});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render( <Provider store={store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}