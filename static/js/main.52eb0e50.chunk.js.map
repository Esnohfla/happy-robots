{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","robo","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","index","src_Card_0","key","id","username","SearchBox","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52eb0e50.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\nimport 'tachyons'\r\n\r\nconst Card = ({name, email, robo}) => {\r\n  return (\r\n     <div className=\"bg-green dib br3 pa3 ma2 grow\">\r\n       <div className =\"tc\">\r\n       <img className=\"br-100 h4 w4 dib ba b--black-05 pa2\"  alt='robots' src={`https://robohash.org/${robo}?size=200x200`} />\r\n          <h2 className=\"f3 mb2\">{name}</h2>\r\n          <h3 className='f5 fw4 white mt0'>{email}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return ( \r\n      <div className = \"cf pa2\"> \r\n      {\r\n        robots.map((user, index) => {\r\n            return ( \r\n              <Card key = {index}\r\n              robo = {robots[index].id}\r\n              name = {robots[index].name}\r\n              email = {robots[index].email}\r\n              />\r\n            )\r\n          })\r\n      }\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    export default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst SearchBox  = ({searchChange}) => {\r\n    return (<div className='pa3'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots here'\r\n        onChange={searchChange}\r\n        />\r\n        \r\n</div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from './CardList';  \r\nimport {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n        \r\n    }\r\n\r\n    render(){\r\n    const filteredRobots = this.state.robots.filter(robots =>{\r\n        return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n    })\r\n    return (\r\n        <div className='tc'>\r\n           <h1 className='f1'>Robo Friends</h1>\r\n           <SearchBox searchChange={this.onSearchChange}/>\r\n           <CardList robots={filteredRobots}/>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />\n    , document.getElementById('root'));\n// ReactDOM.render(< App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}